#
# Python
#
# The main use of this package is to run python programs, for example unit tests
# for python modules, with dependencies per python "import" and "from ... import"
# statements, and after style checking and type checking all dependencies and the
# program itself*.
#
# +py_sp options specify the python search path i.e. PYTHONPATH
#
# note that this package does not mimic python's unhelpful adding of the program's
# directory to the front of the search path, so when using this package, to get
# correct dependency checking, make sure the program has 'import sys; del sys.path[0]' before
# any imports
#
# note also that dependency cycles are not allowed; this includes the (unfortunately widely used)
# "pull-up" anti-pattern, where a module deliberately imports from sub-modules; if you really want to
# gather stuff from implementation modules, make them "sibling" modules not sub-modules; this
# will avoid implicit dependency cycles
#
# note also that this package does not expand import "*", but you wouldn't actually ever do that
# in serious code, so that's not really a problem
#
# this package provides two ways to run the python program:
#
#   :py3.exec - performs the run and status check separately. This method most suits unit
#               tests, because it keeps any partial output (status, stdout, stderr and files)
#               for later analysis. The leaf derivations are:
#     :py3.exec.output - stdout from successful program run
#     :py3.exec.files - tar file bundling up all output files from successful program run
#     :exec.py3.cov - python coverage data from successful program run
#
#     ... a failed run's status, stdout, stderr and files can be seen via
#     :py3.exec/{status,stdout,stderr,files}
#
#   :py3.output / :py3.stdout
#     like the run package's :output and :stdout, but for python programs
#
# * style checking and coverage checking can effecitively be turned off by setting
#   $ODIN_PYSTYLECHECK and $ODIN_MYPY to /bin/true
#
# coverage from individual test runs can be aggregated via :agg.py3.cov and :py3.cov.list
# and 100% coverage can be verified via :py3.cov.checked (which can be applied to individual
# run or aggregated coverage data); by default < 100% is an error, this can be relaxed to
# warnings
#

*.py => :py;

*.egg => :egg;

:py 'python source file'? => :FILE;

:egg 'python egg archive'? => :FILE;

:py_import.view_desc 'view description of python imported files' => :FILE;

:main.py_import.view_desc 'view description of python program imported files' => <:py_import.view_desc>;

:mod.py_import.view_desc 'view description of python module imported files' => :py_import.view_desc;

:py_import 'list of directly python imported files'? => :LIST;

:py_import_all 'list of transitively python imported files'? => :LIST;

:egg.py_import.view_desc 'empty list of imported files'? => :py_import.view_desc;

:py3.stdout 'output from a python3 script run'? => <:stdout>;

:py3.output 'output files from a python3 script run'? => <:output>;

:main.mypy3 'file from mypy static type check of pyton program'? => :FILE;
:mod.mypy3 'file from mypy static type check of python module'? => :FILE;

:main.stylecheck 'empty file from style check of python script'? => :FILE;

:py.stylecheck 'empty file from style check of python module/egg'? => :FILE;
:py.py.stylecheck 'empty file from style check of module'? => :py.stylecheck;
:egg.py.stylecheck 'empty file from style check of egg'? => :py.stylecheck;

:py3.cov.checked 'errors (warnings if +py_cov_check_warn) if python code not fully covered'? => :VOID;
:file.py3.cov.checked 'errors (warnings if +py_cov_check_warn) if .py not fully covered'? => :py3.cov.checked;
:list.py3.cov.checked 'errors (warnings if +py_cov_check_warn) if all pys not fully covered'? => :LIST;
:list.py ':py files in list' => <:LIST>;

#
# :py3.exec is created regardless of exit status of test run, with:
#   :py.exec/files.tar the files produced by the run
#   :py.exec/status - file containing status as single line, eg 0, and either
#   :py.exec/output - the stdout+stderr* if command exits with 0 status, or
#   :py.exec/errors - the stderr* if command exits with non-zero status
#
# * depending on +stderr, see below
#
:py3.exec 'results of a python3 script run'? => :DERIVED-DIRECTORY;

:py3.exec.output ':py3.exec/output where :py3.exec/status is 0'? => :REFERENCE;

:py3.exec.files ':py3.exec/files.tar where :py3.exec/status is 0'? => :REFERENCE;

:py3.exec.cov ':py3.exe/cover where :py3.exe/status is 0'? => :REFERENCE;

:py3.cov 'python coverage data file'? => :FILE;

*.py3.cov => :py3.cov;

:exec.py3.cov 'python coverage data file from :py3.exec' => :py3.cov;

:agg.py3.cov 'aggregated python covrerage data' => :py3.cov;

:py3.cov.list 'list of python coverage reports' => <:LIST>;

+py_sp 'name of a directory in a PYTHONPATH'? => :ls;

+ignore 'grep -E expression for imports to ignore'? => :ls;

+py 'python file to execute'? => :first;

+py_nocov 'do not generate python coverage info' => :first;

+py_cov_check_warn 'warn only on :py3.cov.checked where coverage is 100% (default is error)' => :first;

+stderr 'what to do with command stderr: \\"output\\" to combine with stdout (default), \\"warn\\" to generate warnings, \\"error\\" to display as errors if command fails and command trace otherwise, \\"trace\\" to show as command trace'? => :first;

+mypy_flags 'flags to pass to mypy' => :cat;

+mypy_plugin 'plugin to mypy, added after \$ODIN_MYPY_PLUGINS' => :LIST;

+mypy_plugin_mod 'module plugin to mypy, e.g. xju.json_codec_plugin, e.g. xju.json_codec_plugin:hook, added after \$ODIN_MYPY_PLUGINS and +mypy_plugin' => :cat;

:mypy.config 'mypy config file' => :FILE;

$ODIN_PY_IGNORE 'grep -E expression for python imports to ignore, e.g. \\"^os$|^sys$\\"' = '';

$ODIN_PYTHONPATH 'colon-separated list of directories to search for python3 imports, after searching +py_sp directories, e.g. /usr/local/python3/site-packages' = '';

$ODIN_MYPY_PATH 'PATH to install when executing mypy, colon separated' = '/bin:/usr/bin';
$ODIN_MYPY_LD_LIBRARY_PATH 'shared library load path to install when executing command, colon separated' = '';
$ODIN_MYPY 'name of mypy script' = 'true';
$ODIN_MYPY_FLAGS 'flags to pass to $ODIN_MYPY' = '';

$ODIN_MYPY_MYPYPATH 'colon-separated list of directories to append to +py_sp directory list and set as MYPYPATH when running mypy; note mypy treats modules found via MYPYPATH as \\"source\\" files and will use their inline type hints' = '';

$ODIN_MYPY_PYTHONPATH 'colon-separated list of directories to set as PYTHONPATH when running mypy; note mypy treats modules found via PYTHONPATH as \\"3rd party library\\" files and will NOT use their inline type hints, and mypy uses MYPYPATH first when looking for modules' = '';

$ODIN_MYPY_PLUGINS 'space-separated list of mypy plugin files (: not yet supported)' = '';

$ODIN_PYSTYLECHECK 'name of python style check script, e.g. flake8' = 'true';
$ODIN_PYSTYLECHECK_PATH 'PATH to install when executing python style check script, colon separated' = '/bin:/usr/bin';
$ODIN_PYSTYLECHECK_LD_LIBRARY_PATH 'shared library load path to install when executing python style check script, colon separated' = '';

# note we use :FILE not :py so we can use :py_import_all on
# python script that has no .py extension
EXEC (main.py_import.view_desc) (:FILE) (+py_sp) (+ignore)
   => (:main.py_import.view_desc);

EXEC (mod.py_import.view_desc) (:py) (:py:dir)@ (+py_sp) (+ignore)
   => (:mod.py_import.view_desc);

EXEC (empty-import.sh) (:egg) => (:egg.py_import.view_desc);

COLLECT (:py_import.view_desc :view)
   => (:py_import);

COLLECT (:py_import :map=:py_import_all) (:py_import)
   => (:py_import_all);

#:FILE is stdin
EXEC (py3.pipe.run.sh) (:FILE) (+py) (+cmd :ls) (+py:dir)@ (+py_sp) NEEDS (+cmd) (+need) (+py:main.py_import.view_desc:py_import_all)
   => (:py3.stdout) (:py3.output);

EXEC (py3.exec.sh) (:FILE) (+cmd :ls) (:env) (+stderr) (+py:dir)@ (+py_sp) (+py_nocov) (run-cov)
  NEEDS (+cmd) (+need) (:FILE:main.py_import.view_desc:py_import_all)
        (:FILE:main.mypy3) (:FILE:main.stylecheck)
  => (:py3.exec);

EXEC (main.mypy3.sh) (:FILE) (:mypy.config) (:env) (+py_sp) (+mypy_flags) (:mypy.config:id)
  NEEDS (:FILE:main.py_import.view_desc:py_import_all:map=:mod.mypy3) (+mypy_plugin) (+mypy_plugin_mod)
  => (:main.mypy3);
    
EXEC (mod.mypy3.sh) (:py) (:mypy.config) (:env) (+py_sp) (+mypy_flags) (:mypy.config:id)
  NEEDS (:py:py_import_all:map=:mod.mypy3) (+mypy_plugin) (+mypy_plugin_mod)
  => (:mod.mypy3);
    
EXEC (main.stylecheck.sh) (:FILE) (:env) (+py_sp)
  NEEDS (:FILE:main.py_import.view_desc:py_import_all:map=:py.stylecheck)
  => (:main.stylecheck);

EXEC (py.stylecheck.sh) (:py) (:env) (+py_sp)
  => (:py.py.stylecheck);

EXEC (/usr/bin/touch) 'egg.py.stylecheck' (:egg)
  => (:egg.py.stylecheck);

EXEC (py-cov-check.sh) (py-cov-check) (:py) (+py_cov_check_warn) (+py_cov)
  => (:file.py3.cov.checked);

:py3.exec.output.ref ':py3.exec.output ref' => :FILE;
:py3.exec.files.ref ':py3.exec.files ref' => :FILE;
:py3.exec.cov.ref ':py3.exec.cov ref' => :FILE;

EXEC (py3.exec.output.sh) (:py3.exec/output) (:py3.exec/errors) (:py3.exec/status) (:py3.exec:name) (+stderr)
  => (:py3.exec.output.ref);

EXEC (mypy-config.sh) (+mypy_plugin:ls) (+mypy_plugin_mod) (+py_sp) (+mypy_flags) => (:mypy.config);

READ-REFERENCE (:py3.exec.output.ref) => (:py3.exec.output);

EXEC (py3.exec.files.sh) (:py3.exec/files.tar) (:py3.exec/errors) (:py3.exec/status) (:py3.exec:name) (:py3.exec/output) (+stderr)
  => (:py3.exec.files.ref);

READ-REFERENCE (:py3.exec.files.ref) => (:py3.exec.files);

EXEC (py3.exec.cov.sh) (:py3.exec/run.py3.cov) (:py3.exec/output) (:py3.exec/errors) (:py3.exec/status) (:py3.exec:name) (+stderr)
  => (:py3.exec.cov.ref);

READ-REFERENCE (:py3.exec.cov.ref) => (:py3.exec.cov);

+py_cov 'coverage data for :py3.cov.checked' => :py3.cov;

EXEC (cov-merge.sh) (:py3.cov.list:ls) (merge-cov) NEEDS (:py3.cov.list) => (:agg.py3.cov);

COLLECT (:LIST:extract=:py3.cov) => (:py3.cov.list);
COLLECT (:LIST:extract=:py) => (:list.py);
COLLECT (:list.py:map=:file.py3.cov.checked) => (:list.py3.cov.checked);
